spring.datasource.url=jdbc:mysql://localhost:3306/mydatabase?verifyServerCertificate=false&useSSL=false&requireSSL=false
spring.datasource.username=<username>
spring.datasource.password=<password>
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
spring.jpa.hibernate.ddl-auto=update



package com.training.org;

import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;

public class StudentJDBCTemplate implements StudentDAO{
    private DataSource dataSource;
    private JdbcTemplate jdbcTemplateObject;
    
    public void setDataSource(DataSource dataSource) {
        this.dataSource=dataSource;
        this.jdbcTemplateObject=new JdbcTemplate(dataSource);
    }

    @Override
    public void create(Integer id, String name, Integer age) {
        String query="insert into Student(name,age) values (?,?)";
        jdbcTemplateObject.update(query,name,age);
        System.out.println("Record inserted into student table ");
    }

    @Override
    public List<Student> listStudents() {
        String SQL="select * from student";
        List<Student> student=jdbcTemplateObject.query(SQL, new StudentMapper());
        return student;
    }
    
    
     
    
    
}





package com.training.org;

import java.util.Iterator;
import java.util.List;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MyMain {
    public static void main(String[] args) {
        ApplicationContext context=new ClassPathXmlApplicationContext("applicationContext.xml");
        StudentJDBCTemplate studentJDBCTemplate=(StudentJDBCTemplate)context.getBean("studentJDBCTemplate");
        System.out.println("--CREATE RECORD----");
        //studentJDBCTemplate.create(101, "Eshan", 23);
        
        List<Student> student=studentJDBCTemplate.listStudents();
        for (Student student2 : student) {
            System.out.print("\nID :- "+student2.getId());
            System.out.print("NAME:- "+student2.getName());
            System.out.print("AGE:- "+student2.getAge());
        }
    }

}






package com.training.org;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowMapper;

public class StudentMapper implements RowMapper<Student>{

    @Override
    public Student mapRow(ResultSet rs, int rowNum) throws SQLException {
        Student student=new Student();
        student.setId(rs.getInt("id"));
        student.setName(rs.getNString("name"));
        student.setAge(rs.getInt("age"));
        
        return student;
    }

}






https://gofile.io/d/ZUdrSm





https://gofile.io/d/PJt2Ih


 




<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
               http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
               
    
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
    <property name="url" value="jdbc:mysql://localhost:3306/mydbs"></property>
    <property name="username" value="root"></property>
    <property name="password" value="shital@123"></property>
    
    
    
    </bean>
    
    <bean id="studentJDBCTemplate" class="com.training.org.StudentJDBCTemplate">
    <property name="dataSource" ref="dataSource"></property>
    
    
    </bean>
    
    
</beans> 







package com.training.org;

public class Student {
    private Integer id;
    private String name;
    private Integer age;
    
    public Student() {
        System.out.println("Default constructor of Student is called");
        id=0;
        name="";
        age=0;
    }
    
    public Student(Integer id, String name, Integer age) {
        super();
        this.id = id;
        this.name = name;
        this.age = age;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    @Override
    public String toString() {
        return "Student [id=" + id + ", name=" + name + ", age=" + age + "]";
    }
    
    
    
    
    
}






package com.training.org;

import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;

public class StudentJDBCTemplate implements StudentDAO{
    private DataSource dataSource;
    private JdbcTemplate jdbcTemplateObject;
    
    public void setDataSource(DataSource dataSource) {
        this.dataSource=dataSource;
        this.jdbcTemplateObject=new JdbcTemplate(dataSource);
    }

    @Override
    public void create(Integer id, String name, Integer age) {
        String query="insert into Student(name,age) values (?,?)";
        jdbcTemplateObject.update(query,name,age);
        System.out.println("Record inserted into student table ");
    }
    
    
     
    
    
}







package com.training.org;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MyMain {
    public static void main(String[] args) {
        ApplicationContext context=new ClassPathXmlApplicationContext("applicationContext.xml");
        StudentJDBCTemplate studentJDBCTemplate=(StudentJDBCTemplate)context.getBean("studentJDBCTemplate");
        System.out.println("--CREATE RECORD----");
        studentJDBCTemplate.create(101, "Eshan", 23);
    }

}








create table student(id int not null auto_increment, name varchar(20) not null, age int not null, primary key(id));






<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd ">

   <!-- Initialization for data source -->

   
    <bean id="dataSource2" 
      class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <property name="driverClassName" value="org.mariadb.jdbc.Driver"/>
      <property name="url" value="jdbc:mariadb://localhost:3307/maria_test"/>
      <property name="username" value="root"/>
      <property name="password" value="shital@123"/>
   </bean>

   <!-- Definition for studentJDBCTemplate bean -->
   <bean id="employeeJDBCTemplate" 
      class="com.training.org.EmployeeJDBCTemplate">
      <property name="dataSource"  ref="dataSource2" />    
   </bean>
      
</beans>






The JdbcTemplate class executes SQL queries, update statements and stored procedure calls, performs iteration over ResultSets and extraction of returned parameter values. It also catches JDBC exceptions and translates them to the generic, more informative, exception hierarchy defined in the org.springframework.dao pack
age.
Instances of the JdbcTemplate class are threadsafe once configured. So you can configure a single instance of a JdbcTemplate and then safely inject this shared reference into multiple DAOs.
A common practice when using the JdbcTemplate class is to configure aDataSource in your Spring configuration file, and then dependency-inject that shared DataSource bean into your DAO classes, and the JdbcTemplate is created in the setter for the DataSource.







While working with database using plain old JDBC, it becomes cumbersome to write unnecessary code to handle exceptions, opening and closing database connections etc. But Spring JDBC Framework takes care of all the low-level details starting from opening the connection, prepare and execute the SQL statement, process exceptions, handle transactions and finally close the connection.
So what you have do is just define connection parameters and specify the SQL statement to be executed and do the required work for each iteration while fetching data from the database.
Spring JDBC provides several approaches and correspondingly different classes to interface with the database. I'm going to take classic and the most popular approach which makes use of JdbcTemplate class of the framework. This is the central framework class that manages all the database communication and exception handling.



















https://howtodoinjava.com/spring-core/how-to-publish-and-listen-application-events-in-spring/




package com.training.org;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

@Controller ("employeeController")
public class EmployeeController 
{
    @Autowired
    EmployeeManager manager;
      
    public EmployeeDTO createNewEmployee()
    {
        return manager.createNewEmployee();
    }
}







<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-2.5.xsd">
               
    <context:component-scan base-package="com.training.org"/>

    <bean class="com.training.org.UserEventProcessor"/>
    
    
</beans> 






package com.training.org;

import org.springframework.context.ApplicationListener;

public class UserEventProcessor implements ApplicationListener<EmployeeEvent>{

    @Override
    public void onApplicationEvent(EmployeeEvent event) {
        EmployeeEvent employeeEvent=(EmployeeEvent) event;
        System.out.println("Employee"+employeeEvent.getEventType()+"With Details"+employeeEvent.getEmployee());
    }
    

}





package com.training.org;

import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.ApplicationEventPublisherAware;

public class EmployeeManagerImpl implements EmployeeManager,ApplicationEventPublisherAware{

    private EmployeeDAO dao;
    private ApplicationEventPublisher publisher;
    @Override
    public void setApplicationEventPublisher(ApplicationEventPublisher publisher) {
        // TODO Auto-generated method stub
        this.publisher=publisher;
        
        
    }

    @Override
    public EmployeeDTO createNewEmployee() {
        EmployeeDTO employee=dao.createNewEmployee();
        publisher.publishEvent(new EmployeeEvent(this, "ADD", employee));
        
        return employee;
    }

}







package com.training.org;

import org.springframework.context.ApplicationListener;

public class UserEventProcessor implements ApplicationListener<EmployeeEvent>{

}




package com.training.org;

public interface EmployeeManager {
    public EmployeeDTO createNewEmployee();
}





package com.training.org;

import org.springframework.context.ApplicationEvent;

public class EmployeeEvent extends ApplicationEvent {

    private String eventType;
    private EmployeeDTO employee;
    public EmployeeEvent(Object source,String eventType,EmployeeDTO employee) {
        super(source);
        this.eventType=eventType;
        this.employee=employee;
        
    }
    
    
    public String getEventType() {
        return eventType;
    }
    
    public EmployeeDTO getEmployee() {
        return employee;
    }
}






package com.training.org;

public class EmployeeDTO {
    private Integer id;
    private String fistName;
    private String lastName;
    private String designation;
    
    public EmployeeDTO() {
        System.out.println("Default constructor of EmployeeDTO is called");
        this.id = 0;
        this.fistName = "";
        this.lastName = "";
        this.designation = "";
    }
    
    public EmployeeDTO(Integer id, String fistName, String lastName, String designation) {
        System.out.println("Parameterised constructor of EmployeeDTO is called");
        this.id = id;
        this.fistName = fistName;
        this.lastName = lastName;
        this.designation = designation;
    }

    
    
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getFistName() {
        return fistName;
    }

    public void setFistName(String fistName) {
        this.fistName = fistName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getDesignation() {
        return designation;
    }

    public void setDesignation(String designation) {
        this.designation = designation;
    }

    @Override
    public String toString() {
        return "EmployeeDTO [id=" + id + ", fistName=" + fistName + ", lastName=" + lastName + ", designation="
                + designation + "]";
    }
    
    

}







package com.training.org;

public class EmployeeDAOImpl implements EmployeeDAO{

    @Override
    public EmployeeDTO createNewEmployee() {
        EmployeeDTO e=new EmployeeDTO();
        e.setId(101);
        e.setFistName("Eshan");
        e.setLastName("Madake");
        e.setDesignation("Manager");
        
        return e;
    }
    
    
    public void initBean() {
        System.out.println("Init bean for : EmployeeDAOImpl");
        }
    
    public void distroyBean() {
        System.out.println("Destroy bean for : EmployeeDAOImpl");
    }
    

    
}






package com.training.org;

public interface EmployeeDAO {
    public EmployeeDTO createNewEmployee();
}







<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
               http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
    <bean id="customEventPublisher"
        class="com.training.org.CustomEventPublisher">

    </bean>

    <bean id="customEventHandler"
        class="com.training.org.CustomEventHandler"></bean>

</beans> 







Beans.xml



package com.training.org;

    import org.springframework.context.ApplicationListener;
    
    public class CustomEventHandler implements ApplicationListener<CustomEvent>{
    
        @Override
        public void onApplicationEvent(CustomEvent event) {
            System.out.println(event.toString());
            
        }
    
    }






package com.training.org;

import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.ApplicationEventPublisherAware;

public class CustomEventPublisher implements ApplicationEventPublisherAware{

    private ApplicationEventPublisher publisher;
    @Override
    public void setApplicationEventPublisher(ApplicationEventPublisher publisher) {
        
        this.publisher=publisher;
        // TODO Auto-generated method stub
    }
    
    public void publish() {
        CustomEvent ce=new CustomEvent(this);
        publisher.publishEvent(ce);
    }

}







package com.training;

import org.springframework.context.ApplicationEvent;

public class CustomEvent extends ApplicationEvent{
   
   public CustomEvent(Object source) {
      super(source);
   }

   public String toString(){
      return "My Custom Event";
   }
}






STEPS


1   Create a project with a name SpringExample and create a package com.trainingpoint under the src folder in the created project. All the classes will be created under this package.
2   Add required Spring libraries using Add External JARs option as explained in the Spring Hello World Example chapter.
3   Create an event class, CustomEvent by extending ApplicationEvent. This class must define a default constructor which should inherit constructor from ApplicationEvent class.
4   Once your event class is defined, you can publish it from any class, let us say EventClassPublisher which implements ApplicationEventPublisherAware. You will also need to declare this class in XML configuration file as a bean so that the container can identify the bean as an event publisher because it implements the ApplicationEventPublisherAware interface.
5   A published event can be handled in a class, let us say EventClassHandler which implements ApplicationListener interface and implements onApplicationEvent method for the custom event.
6   Create beans configuration file Beans.xml under the src folder and a MainApp class which will work as Spring application.
7   The final step is to create the content of all the Java files and Bean Configuration file and run the application as explained below.



















<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
               http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
               
    <bean id="helloBean" class="com.training.org.HelloWorld">
        <property name="message" value="Hello DBS"></property>
    </bean>
    
       <bean id="cStartEventHandler" 
         class="com.training.org.CStartEventHandler"/>

   <bean id="cStopEventHandler" 
         class="com.training.org.CStopEventHandler"/>
    
    
</beans> 







package com.training;

import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MainApp {
   public static void main(String[] args) {
      ConfigurableApplicationContext context = 
      new ClassPathXmlApplicationContext("Beans.xml");

      // Let us raise a start event.
      context.start();
      
      HelloWorld obj = (HelloWorld) context.getBean("helloWorld");

      obj.getMessage();

      // Let us raise a stop event.
      context.stop();
   }
}







package com.training.org;

import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextStoppedEvent;

public class CStopEventHandler 
   implements ApplicationListener<ContextStoppedEvent>{

   public void onApplicationEvent(ContextStoppedEvent event) {
      System.out.println("ContextStoppedEvent Received");
   }
}

    
    
    
    

package com.training.org;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextStartedEvent;

public class CStartEventHandler 
   implements ApplicationListener<ContextStartedEvent>{

   public void onApplicationEvent(ContextStartedEvent event) {
      System.out.println("ContextStartedEvent Received");
   }
}

    
    
    
    


package com.training.org;
public class HelloWorld {
    private String message;

    public HelloWorld() {
        System.out.println("Default constuctor of HelloWorld is called");
        this.message = message;
    }
    
    
    public HelloWorld(String message) {
        System.out.println("Parameterised constuctor of HelloWorld is called");
        this.message = message;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }


    @Override
    public String toString() {
        return "HelloWorld [message=" + message + "]";
    }
    
    
}




1   Create a project with a name SpringExample and create a package com.training under the src folder in the created project.
2   Add Spring libraries using Add External JARs option as explained in the Spring Hello Wrequiredorld Example chapter.
3   Create Java classes HelloWorld, CStartEventHandler, CStopEventHandler and MainApp under the com.training package.
4   Create Beans configuration file Beans.xml under the src folder.
5   The final step is to create the content of all the Java files and Bean Configuration file and run the application as explained below.







Listening to Context Events:
To listen a context event, a bean should implement the ApplicationListenerinterfac e which has just one method onApplicationEvent(). So let us write an example to see how the events propagates and how you can put your code to do required task based on certain events.







You have seen in all the chapters that core of Spring is theApplicationContext, which manages complete life cycle of the beans. The ApplicationContext publishes certain types of events when loading the beans. For example, a ContextStartedEvent is published when the context is started and ContextStoppedEvent is published when the context is stopped.
Event handling in the ApplicationContext is provided through the  ApplicationEvent class and ApplicationListener interface. So if a bean implements the ApplicationListener, then every time an ApplicationEvent gets published to the ApplicationContext, that bean is notified.


